(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (factory());
}(this, (function () { 'use strict';

function ___$insertStyle(css) {
  if (!css) {
    return;
  }
  if (typeof window === 'undefined') {
    return;
  }

  var style = document.createElement('style');

  style.setAttribute('type', 'text/css');
  style.innerHTML = css;
  document.head.appendChild(style);

  return css;
}

___$insertStyle("@charset \"UTF-8\";\n/*\r\n * Beautiful Color\r\n */\n/*\r\n * 设置placeholder样式\r\n */\n* {\n  box-sizing: border-box; }\n\nbody, div, dl, dt, dd, ul, ol, li,\nh1, h2, h3, h4, h5, h6, pre, code,\nform, fieldset, legend, input, button,\ntextarea, p, blockquote, th, td {\n  margin: 0;\n  padding: 0; }\n\na, a:hover, a:active, a:focus, input, input:hover, input:active, input:focus {\n  outline: none; }\n\nul, ol {\n  list-style: none; }\n\nbody {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f3f3f3; }\n\ncanvas {\n  border: 1px solid #ccc; }\n");

/**
 * 游戏配置文件
 */

var DPR = window.devicePixelRatio || 1;
var BG_COLOR = '#31102e'; // 背景颜色
var ROAD_COLOR = '#ff186b'; // 道路颜色
var WALL_COLOR = '#421052'; // 墙的颜色
var GAME_WIDTH = 320 * DPR; // 游戏实际宽度
var GAME_SPEED = 0.5 * DPR; // 游戏速度
var MAX_BALL_PER_DISTANCE = 30 * DPR; // 小球的最快移动速度
var MAX_ROAD_WIDTH = 100 * DPR; // 道路最大宽度
var MIN_ROAT_WIDTH = 60 * DPR; // 道路最小宽度
var MAX_LENGTH = 100 * DPR; // 一节道路的最大长度
var MIN_LENGTH = 50 * DPR; // 一节道路的最小长度
var BALL_RADIUS = 6 * DPR; // 球的半径
var TAIL_LENGTH = 100 * DPR; // 小球尾巴长度
var TAIL_DIST = 5 * DPR; // 小球与尾巴的距离
var TAIL_WIDTH = 2 * DPR; // 小球尾巴的宽度

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var _default$1 = {
  x: 0,
  y: 0
};

var Ball = function () {
  function Ball(ctx, config) {
    classCallCheck(this, Ball);

    this.ctx = ctx;
    Object.assign(this, _default$1, config);
    this.tails = this.initTail();
    this.f = 1;
  }
  /**
   * 初始化尾巴数组
   * @return {Array} 尾巴数组
   */


  createClass(Ball, [{
    key: 'initTail',
    value: function initTail() {
      var x = this.x,
          y = this.y;

      var tails = [];
      var startPos = [x, y + BALL_RADIUS + TAIL_DIST];

      for (var i = 0; i < TAIL_LENGTH / DPR; i++) {
        tails.push({
          x: startPos[0],
          y: startPos[1] + i * DPR
        });
      }

      return tails;
    }

    /**
     * 更新球的位置，并且修改尾巴坐标数组
     */

  }, {
    key: 'updateBallPos',
    value: function updateBallPos(pos) {
      var a = this.tails[0].x;
      for (var i = 1; i < this.tails.length; i++) {
        var b = this.tails[i].x;
        this.tails[i].x = a;
        a = b;
      }

      this.x = pos;
      this.tails[0] = {
        x: pos,
        y: this.tails[0].y
      };
    }

    /**
     * 渲染
     */

  }, {
    key: 'render',
    value: function render() {
      this.renderShadow();
      this.renderBall();
      this.renderTail();
    }

    /**
     * 画个球
     */

  }, {
    key: 'renderBall',
    value: function renderBall() {
      var x = this.x,
          y = this.y;

      var grd = this.ctx.createLinearGradient(x, y - BALL_RADIUS, x, y + BALL_RADIUS);
      grd.addColorStop(0, '#fff');
      grd.addColorStop(0.5, '#fff');
      grd.addColorStop(0.5, '#c7baac');
      grd.addColorStop(1, '#c7baac');
      this.ctx.fillStyle = grd;
      this.ctx.beginPath();
      this.ctx.arc(x, y, BALL_RADIUS, 0, Math.PI * 2, true);
      this.ctx.fill();
    }
    /**
     * 画球的阴影
     */

  }, {
    key: 'renderShadow',
    value: function renderShadow() {
      var x = this.x,
          y = this.y;


      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
      this.ctx.save();
      this.ctx.scale(1, 0.5);
      this.ctx.beginPath();
      this.ctx.arc(x, y * 2 + BALL_RADIUS * 2, BALL_RADIUS, 0, 2 * Math.PI, false);
      this.ctx.closePath();
      this.ctx.restore();
      this.ctx.fill();
    }
    /**
     * 画球的小尾巴
     */

  }, {
    key: 'renderTail',
    value: function renderTail() {
      var x = this.x,
          y = this.y;


      var startPos = [x, y + BALL_RADIUS + TAIL_DIST];
      var endPos = [x, y + BALL_RADIUS + TAIL_DIST + TAIL_LENGTH];
      var grd = this.ctx.createLinearGradient(startPos[0], startPos[1], endPos[0], endPos[1]);
      grd.addColorStop(0, 'rgba(255, 255, 255, .8)');
      grd.addColorStop(0.5, 'rgba(255, 255, 255, .5)');
      grd.addColorStop(1, 'transparent');

      /* 轨迹尾巴 */
      this.ctx.strokeStyle = grd;
      this.ctx.lineWidth = TAIL_WIDTH;
      this.ctx.lineCap = 'round';
      this.ctx.beginPath();
      for (var i = 1; i < this.tails.length; i++) {
        this.ctx.moveTo(this.tails[i].x, this.tails[i].y);
        this.ctx.lineTo(this.tails[i - 1].x, this.tails[i - 1].y);
      }
      this.ctx.stroke();
    }
  }]);
  return Ball;
}();

var _default$2 = {
  width: 600,
  height: 500
};

var Scene = function () {
  function Scene(ctx, config) {
    classCallCheck(this, Scene);

    this.ctx = ctx;
    Object.assign(this, _default$2, config);

    // 根据画布宽度和实际游戏宽度，计算左右留空区域
    this.spacer = (this.width - GAME_WIDTH) / 2;

    // 初始化
    this.init();
  }

  /**
   * 初始化场景
   */


  createClass(Scene, [{
    key: 'init',
    value: function init() {
      this.leftLines = this.initLeftLines();
      this.rightLines = this.initRightLines();
    }

    /**
     * 更新场景
     */

  }, {
    key: 'update',
    value: function update() {
      this.leftLines = this.sceneRollDown(this.leftLines);
      this.rightLines = this.sceneRollDown(this.rightLines);

      // 添加新的路
      if (this.leftLines[0][0].y > -this.height * 2) {
        this.leftLines.unshift(this.getLeftLine(this.leftLines[0][0], true));
        this.rightLines.unshift(this.getRightLine(this.leftLines[0], this.rightLines[0][0], true));
      }
    }

    /**
     * 场景下滚，数组的 y 增加，并把超出画布下边界的线清除掉
     * @param  {Array} arr 线数组
     * @return {Array}     线数组
     */

  }, {
    key: 'sceneRollDown',
    value: function sceneRollDown(arr) {
      var _this = this;

      return arr.filter(function (obj) {
        obj[0].y += GAME_SPEED;
        obj[1].y += GAME_SPEED;

        return obj[0].y < _this.height * 2;
      });
    }

    /**
     * 初始化道路左侧的线
     * @return {Array} 线数组
     */

  }, {
    key: 'initLeftLines',
    value: function initLeftLines() {
      var arr = [this.getLeftLine()];
      while (arr[arr.length - 1][1].y < this.height) {
        arr.push(this.getLeftLine(arr[arr.length - 1][1]));
      }
      return arr;
    }

    /**
     * 初始化道路右侧的线
     * @return {Array} 线数组
     */

  }, {
    key: 'initRightLines',
    value: function initRightLines() {
      var arr = [];
      for (var i = 0; i < this.leftLines.length; i++) {
        arr.push(this.getRightLine(this.leftLines[i], i > 0 && arr[i - 1][1]));
      }
      return arr;
    }

    /**
     * 得到一条左边的线
     * @param  {Object}  dot        一个点坐标对象，为空时则根据范围随机一个点
     * @param  {Boolean} isReverse 是否为反方向获得线
     * @return {Array}             一个包含起点坐标和结束坐标的线数组 eg: [startDot, endDot]
     */

  }, {
    key: 'getLeftLine',
    value: function getLeftLine(dot, isReverse) {
      var endDot = void 0;
      if (isReverse) {
        endDot = dot;
        dot = this.getLeftOtherDot(endDot, isReverse);
      } else if (dot) {
        endDot = this.getLeftOtherDot(dot);
      } else {
        dot = {
          x: this.getRandom(this.spacer, this.width - MAX_ROAD_WIDTH - this.spacer),
          y: -this.height * 2
        };
        endDot = this.getLeftOtherDot(dot);
      }
      return [dot, endDot];
    }

    /**
     * 得到一条右侧的线，根据左侧的线获得
     * @param  {Array}  line      左侧的线
     * @param  {Object}  dot       一个点坐标对象
     * @param  {Boolean} isReverse 是否为反方向获得线
     * @return {Array}            一个包含起点坐标和结束坐标的线数组 eg: [startDot, endDot]
     */

  }, {
    key: 'getRightLine',
    value: function getRightLine(line, dot, isReverse) {
      return isReverse ? [this.getRightDot(line[0]), dot] : [dot || this.getRightDot(line[0]), this.getRightDot(line[1])];
    }

    /**
     * 渲染场景
     */

  }, {
    key: 'render',
    value: function render() {
      this.renderWall();
      this.renderRoad();
    }

    /**
     * 渲染道路
     */

  }, {
    key: 'renderRoad',
    value: function renderRoad() {
      this.ctx.fillStyle = ROAD_COLOR;
      this.connectRoadPath();
      this.ctx.fill();
    }

    /**
     * 连接道路的路径，将左侧和右侧线数组连接成一起
     * @return {[type]} [description]
     */

  }, {
    key: 'connectRoadPath',
    value: function connectRoadPath() {
      var _this2 = this;

      this.ctx.save();

      this.ctx.beginPath();
      this.connectLine(this.leftLines[0][0], this.leftLines[0][1]);
      Array.from(this.leftLines, function (obj) {
        _this2.connectLine(obj[0], obj[1]);
      });
      this.connectLine(this.leftLines[this.leftLines.length - 1][1], this.rightLines[this.rightLines.length - 1][1]);
      for (var i = this.rightLines.length - 1; i > 0; i--) {
        var obj = this.rightLines[i];
        this.connectLine(obj[1], obj[0]);
      }
      this.connectLine(this.rightLines[0][0], this.leftLines[0][0]);

      this.ctx.restore();
    }

    /**
     * 根据两个点连成一条线
     * @param  {Object} dot1  起始点
     * @param  {Object} dot2  终止点
     */

  }, {
    key: 'connectLine',
    value: function connectLine(dot1, dot2) {
      this.ctx.lineTo(dot1.x, dot1.y);
      this.ctx.lineTo(dot2.x, dot2.y);
    }

    /**
     * 画墙
     */

  }, {
    key: 'renderWall',
    value: function renderWall() {
      var _this3 = this;

      this.ctx.save();
      Array.from(this.leftLines.concat(this.rightLines), function (obj) {
        var _obj = slicedToArray(obj, 2),
            dot1 = _obj[0],
            dot2 = _obj[1];

        var WALL_HEIGHT = _this3.height / 2;

        var grd = _this3.ctx.createLinearGradient(dot1.x, dot1.y, dot2.x + WALL_HEIGHT, dot2.y + WALL_HEIGHT);
        grd.addColorStop(0, WALL_COLOR);
        grd.addColorStop(1, 'transparent');

        _this3.ctx.fillStyle = grd;
        _this3.ctx.save();
        _this3.ctx.beginPath();
        _this3.ctx.moveTo(dot1.x, dot1.y);
        _this3.ctx.lineTo(dot2.x, dot2.y);
        _this3.ctx.lineTo(dot2.x, dot2.y + WALL_HEIGHT);
        _this3.ctx.lineTo(dot1.x, dot1.y + WALL_HEIGHT);
        _this3.ctx.restore();
        _this3.ctx.fill();
      });
      this.ctx.restore();
    }

    /**
     * 根据一个点，获取另外一个点
     * @param  {Object}  dot       点坐标对象
     * @param  {Boolean} isReverse 是否反方向获取线
     * @return {[type]}            [description]
     */

  }, {
    key: 'getLeftOtherDot',
    value: function getLeftOtherDot(dot, isReverse) {
      return {
        x: dot.x > this.width / 2 ? this.getRandom(this.spacer, this.width / 2) : this.getRandom(this.width / 2, this.width - MAX_ROAD_WIDTH - this.spacer),
        y: dot.y + this.getRandom(MIN_LENGTH, MAX_LENGTH) * (isReverse ? -1 : 1)
      };
    }

    /**
     * 得到右侧的点
     * @param  {Object} dot 一个左侧的坐标点
     * @return {Object}     一个右侧的坐标点
     */

  }, {
    key: 'getRightDot',
    value: function getRightDot(dot) {
      return {
        x: this.getRandom(dot.x + MIN_ROAT_WIDTH, dot.x + MAX_ROAD_WIDTH),
        y: dot.y
      };
    }

    /**
     * 根据范围，获得一个随机数
     * @param  {Number} min 范围最小值
     * @param  {Number} max 范围最大值
     * @return {Number}     随机数
     */

  }, {
    key: 'getRandom',
    value: function getRandom(min, max) {
      return ~~(Math.random() * (max - min)) + min;
    }
  }]);
  return Scene;
}();

/**
 * BallRunner.js
 * 一个小球滚动的 Canvas 游戏
 *
 * author: NightCat
 * create_at: 2017/09/12
 */

var _default = {
  width: 600,
  height: 500
};

var BallRunner = function () {
  function BallRunner(id, config) {
    classCallCheck(this, BallRunner);

    this.config = Object.assign({}, _default, config);

    // 初始化
    this.init(id);
    this.initGame();

    // 绑定事件
    this.moveBall = this.moveBall.bind(this);
    this.bindEvent();
  }

  /**
   * 初始化 Canvas
   */


  createClass(BallRunner, [{
    key: 'init',
    value: function init(id) {
      if (!id) {
        console.error('[BallRunner.js] param id is the required.');
        return false;
      }

      this.canvas = document.getElementById(id);
      this.ctx = this.canvas.getContext('2d');

      // 乘以DPR是为了在高倍分辨率下保持高清
      this.canvas.width = this.width = (this.config.width || this.canvas.offsetWidth) * DPR;
      this.canvas.height = this.height = (this.config.height || this.canvas.offsetHeight) * DPR;
      this.canvas.style.width = this.width / DPR + 'px';
      this.canvas.style.height = this.height / DPR + 'px';
      this.bounds = this.canvas.getBoundingClientRect();
    }

    /**
     * 初始化游戏
     */

  }, {
    key: 'initGame',
    value: function initGame() {
      this.startSign = false;
      this.mx = 0;

      // 生成球
      this.ball = new Ball(this.ctx, {
        x: this.width / 2,
        y: this.height / 2
      });

      // 生成场景
      this.scene = new Scene(this.ctx, {
        width: this.width,
        height: this.height
      });

      while (!this.inRoad()) {
        this.scene.init();
      }

      // 开始渲染
      this.render();
    }

    /**
     * 绑定事件
     */

  }, {
    key: 'bindEvent',
    value: function bindEvent() {
      this.canvas.addEventListener('mousemove', this.moveBall);
    }

    /**
     * 解除绑定事件
     */

  }, {
    key: 'unbindEvent',
    value: function unbindEvent() {
      this.canvas.removeEventListener('mousemove', this.moveBall);
    }

    /**
     * 控制小球左右移动
     * @return {[type]} [description]
     */

  }, {
    key: 'moveBall',
    value: function moveBall(e) {
      if (!this.startSign) {
        return false;
      }

      e.preventDefault();
      this.mx = (e.clientX - this.bounds.left) * DPR;
    }

    /**
     * 游戏开始
     */

  }, {
    key: 'start',
    value: function start() {
      var _this = this;

      if (this.startSign) {
        return false;
      }

      this.startSign = true;
      var step = function step() {
        if (!_this.startSign) {
          return false;
        }
        _this.update();
        _this.render();
        if (!_this.inRoad()) {
          console.log('You Lose!');
          _this.startSign = false;
        }
        requestAnimationFrame(step);
      };

      requestAnimationFrame(step);
    }

    /**
     * 更新游戏
     */

  }, {
    key: 'update',
    value: function update() {
      this.updateScene();
      this.updateBall();
    }
  }, {
    key: 'inRoad',
    value: function inRoad() {
      this.scene.connectRoadPath();
      return this.ctx.isPointInPath(this.ball.x, this.ball.y + BALL_RADIUS);
    }

    /**
     * 更新个球
     */

  }, {
    key: 'updateBall',
    value: function updateBall() {
      if (!this.mx) {
        return false;
      }

      var diff = this.mx - this.ball.x;
      var direction = diff < 0 ? -1 : 1;
      this.ball.updateBallPos(this.ball.x + direction * (Math.abs(diff) / this.width * MAX_BALL_PER_DISTANCE));
    }

    /**
     * 更新场景
     */

  }, {
    key: 'updateScene',
    value: function updateScene() {
      this.scene.update();
    }

    /**
     * 渲染画布
     */

  }, {
    key: 'render',
    value: function render() {
      this.renderBackground();
      this.renderScene();
      this.renderBall();
    }

    /**
     * 画个背景
     */

  }, {
    key: 'renderBackground',
    value: function renderBackground() {
      this.ctx.fillStyle = BG_COLOR;
      this.ctx.fillRect(0, 0, this.width, this.height);
    }

    /**
     * 画个场景
     */

  }, {
    key: 'renderScene',
    value: function renderScene() {
      this.scene.render();
    }

    /**
     * 画个球
     */

  }, {
    key: 'renderBall',
    value: function renderBall() {
      this.ball.render();
    }
  }]);
  return BallRunner;
}();

var game = new BallRunner('ball-runner');

document.getElementById('ball-runner').onclick = function () {
  return game.start();
};

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
